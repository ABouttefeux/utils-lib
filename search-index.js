var searchIndex = JSON.parse('{\
"macro_utils":{"doc":"macro-utils","t":"AOODDENNLLLLLLLLLLLLLMLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLL","n":["field","getter","quote_compile_error","Field","FieldInformation","FieldName","Ident","Index","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","field","field","field_name","field_name","fmt","from","from","from","from","from","from","from_field","from_field","from_field_ref","index","index","into","into","into","new","require_ident","span","to_owned","to_owned","to_owned","to_string","to_tokens","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id"],"q":[[0,"macro_utils"],[3,"macro_utils::field"],[58,"syn::data"],[59,"core::fmt"],[60,"core::fmt"],[61,"syn::expr"],[62,"core::option"],[63,"proc_macro2"],[64,"proc_macro2"],[65,"syn::ty"],[66,"core::any"]],"d":["Contains Fields utility.","create a getter function","Creates a quote with compile error with the given message","Contain a <code>syn::Field</code> and an index that track the index of …","Contain the <code>FieldName</code> and <code>Type</code> of a field","Represent the way to access a field. Either with …","the field is accessed with an ident as name field","the field is accessed with an index as a tuple or uname …","","","","","","","","","","","","","getter of the syn’s field","the syn field","Getter on the field name.","the way to access the field","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the way to access the field from a <code>Field</code>. If you want …","Create a <code>FieldInformation</code> from a <code>Field</code>.","Get the way to access the field from a <code>Field</code>. It clones …","the getter on the index used for tuple struct","the position of the field. Mostly for tuple struct","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the constructor","Return <code>Some</code> on an <code>Ident</code> and <code>None</code> on an <code>Index</code>","","","","","","","","","","","","","Getter on the <code>Type</code> of the field.","The type of the field","","",""],"i":[0,0,0,0,0,0,2,2,1,2,3,1,2,3,1,2,3,1,2,3,1,1,3,3,2,1,2,2,2,2,3,2,3,2,1,1,1,2,3,1,2,2,1,2,3,2,2,1,2,3,1,2,3,3,3,1,2,3],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],0,[3,2],0,[[2,6],7],[-1,-1,[]],[8,2],[9,2],[10,2],[-1,-1,[]],[-1,-1,[]],[1,2],[1,3],[1,2],[1,10],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,10],1],[2,[[11,[8]]]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[[2,14],4],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[3,16],0,[-1,17,[]],[-1,17,[]],[-1,17,[]]],"c":[],"p":[[3,"Field",3],[4,"FieldName",3],[3,"FieldInformation",3],[15,"tuple"],[3,"Field",58],[3,"Formatter",59],[6,"Result",59],[3,"Ident",60],[3,"Index",61],[15,"usize"],[4,"Option",62],[3,"Span",60],[3,"String",63],[3,"TokenStream",60],[4,"Result",64],[4,"Type",65],[3,"TypeId",66]],"b":[[26,"impl-From%3CIdent%3E-for-FieldName"],[27,"impl-From%3CIndex%3E-for-FieldName"],[28,"impl-From%3Cusize%3E-for-FieldName"]]},\
"utils_lib":{"doc":"utils-lib","t":"CCYCYCCCAAOAOSEDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLDLLLLLLLLLLLLLLLLLLLLLCCCIDCCFLLLLLLLLLLLLLLLFLFLALKALLLLKAELLLLLLLLLLNLLLLSNSLDLNSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLENSNNSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Axis2D","Coordinate","Getter","PositiveFloat","Sealed","ValidationGuard","ZeroOneBoundedFloat","abs_diff","coordinate","error","impl_op_trait","number","trait_sealed","AXIS","Axis2D","Coordinate","CoordinateIterator","Horizontal","Vertical","add","add_assign","as_array","as_array_mut","as_index","as_mut","as_mut","as_ref","as_ref","as_ref","as_tuple","as_tuple_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","coordinate_usize","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_index","get","get_mut","hash","hash","hash","index","index","index_mut","index_mut","into","into","into","into_array","into_array_const","into_iter","into_iter","into_iter","into_iter","into_tuple","into_tuple_const","is_zero","iter","iter_mut","neg","new","new","next","next_back","not","partial_cmp","partial_cmp","perpendicular","s1_distance","serialize","serialize","serialize","size_hint","sub","sub_assign","to_index","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x","x","x_mut","y","y","y_mut","zero","NoneError","borrow","borrow_mut","clone","clone_into","cmp","default","deserialize","eq","fmt","fmt","from","from","hash","into","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","PositiveFloat","PositiveFloatConversionError","Sign","Validation","ValidationGuard","ZeroOneBoundedFloat","ZeroOneBoundedFloatConversionError","abs_diff","as_mut","as_ref","borrow","borrow_mut","deref","deref_mut","drop","eq","fmt","fmt","fmt","fmt","from","from","from","gcd","into","lcm","new","positive_float","serialize","set_float","sign","to_string","try_from","try_into","type_id","validate_data","zero_one_bounded_float","ConversionError","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Infinity","LN_10","LN_2","LOG10_E","LOG2_E","MAX","Nan","ONE","PI","PositiveFloat","SQRT_2","TooLow","ZERO","add","add","add","add","add","add_assign","add_assign","add_assign","as_","as_ref","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","deref","deserialize","deserialize","div","div","div","div","div","div_assign","div_assign","div_assign","eq","eq","float","float_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","inv","is_one","is_zero","max_value","max_value","min_value","min_value","mul","mul","mul","mul","mul","mul_add","mul_add_assign","mul_assign","mul_assign","mul_assign","new","new_or_bounded","new_or_default","one","partial_cmp","pow","pow","pow","rem","rem","rem","rem","rem_assign","rem_assign","saturating_add","saturating_mul","saturating_sub","serialize","serialize","set_float","source","to_be_bytes","to_f64","to_i128","to_i64","to_le_bytes","to_owned","to_owned","to_string","to_string","to_u128","to_u64","try_from","try_from","try_from","try_into","try_into","type_id","type_id","validate_data","zero","Negative","Positive","Sign","Zero","borrow","borrow_mut","clone","clone_into","cmp","default","deserialize","eq","fmt","fmt","from","from","from","hash","into","levi_civita","mul","mul_assign","neg","partial_cmp","serialize","sign_f64","sign_from_diff","sign_i8","to_f64","to_i8","to_owned","to_string","try_from","try_into","type_id","ConversionError","Nan","ONE","TooBig","TooLow","ZERO","ZeroOneBoundedFloat","add","as_","as_ref","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","deref","deserialize","deserialize","div","eq","eq","float","float_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","into","into","inv","is_one","max_value","max_value","min_value","min_value","mul","mul","mul","mul","mul","mul_assign","mul_assign","new","new_or_bounded","new_or_default","one","partial_cmp","pow","pow","pow","rem","rem","rem","rem","rem_assign","rem_assign","saturating_add","saturating_div","saturating_mul","saturating_sub","serialize","serialize","set_float","source","to_be_bytes","to_f64","to_i128","to_i64","to_le_bytes","to_owned","to_owned","to_string","to_string","to_u128","to_u64","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","validate_data"],"q":[[0,"utils_lib"],[13,"utils_lib::coordinate"],[142,"utils_lib::error"],[164,"utils_lib::number"],[201,"utils_lib::number::positive_float"],[336,"utils_lib::number::sign"],[371,"utils_lib::number::zero_one_bounded_float"],[471,"core::ops::arith"],[472,"core::ops::arith"],[473,"core::cmp"],[474,"core::cmp"],[475,"core::result"],[476,"serde::de"],[477,"serde::de"],[478,"core::fmt"],[479,"alloc::vec"],[480,"core::hash"],[481,"core::hash"],[482,"num_traits::identities"],[483,"core::iter::traits::iterator"],[484,"core::iter::traits::double_ended"],[485,"core::iter::traits::marker"],[486,"core::iter::traits::exact_size"],[487,"core::ops::arith"],[488,"serde::ser"],[489,"core::any"],[490,"core::marker"],[491,"core::ops::arith"],[492,"num_traits::cast"],[493,"core::error"]],"d":["","","Derive getter macro","","Derive the <code>Sealed</code> trait","","","","Module containing <code>Coordinate</code> a 2d coordinate and <code>Axis2D</code> an …","Contains the errors definitions.","impl <code>std::ops</code> trait for a given type wrapper with a given …","Contains number and math utilities.","Creates a trait <code>Sealed</code> into a private module <code>private</code>.","All the possible axis","Represent the Axis in 2 dimensions. It can be either in …","A two dimensional vector.","<code>Iterator</code> on a coordinate <code>Coordinate</code>. It is the type return …","Y Axis","X axis","","","Get the <code>Coordinate</code> as an array references","Get the <code>Coordinate</code> as an array mut references","Convert an <code>Axis2D</code> as an index","converts a <code>&amp;mut CoordinateIterator&lt;T&gt;</code> into a …","Get the <code>Coordinate</code> as a <code>Coordinate</code> mut references","","converts a <code>&amp;CoordinateIterator&lt;T&gt;</code> into a …","Get the <code>Coordinate</code> as a <code>Coordinate</code> references","Get the <code>Coordinate</code> as a tuple references","Get the <code>Coordinate</code> as a tuple mut references","","","","","","","","","","","","","","","Convert an <code>Axis2D</code> into a cardinal direction in the form of …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Convert an index into an <code>Axis2D</code>","Get the coordinate given by the <code>Axis2D</code> direction.","Get a mutable reference on the coordinate given by the …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the <code>Coordinate</code> as an array","Get the <code>Coordinate</code> as an array. This is a const function.","","","","","Get the <code>Coordinate</code> as a tuple","Get the <code>Coordinate</code> as a tuple. This is a const function.","","Get an iterator on the coordinate elements","Get an iterator on the coordinate elements as mutable …","","Create a new iterator from a <code>Coordinate</code>.","Create a new <code>Coordinate</code> with two values for, respectively, …","","","","","","Get the perpendicular axis","Manhattan distances","","","","","","","Convert an <code>Axis2D</code> into an index","","","","","","","","","","","","","","","Get the x coordinate.","the x coordinate","Get a mut reference on the x coordinate.","Get the y coordinate.","the y coordinate","Get a mut reference on the y coordinate.","","The error equivalent of getting a <code>None</code> on an <code>Option</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Trait for type that have some validation step for data","A structure created by <code>PositiveFloat::float_mut</code>, it can be …","","","Do the absolute difference of two numbers. In mathematical …","","","","","","","","","","","","","","","Returns the argument unchanged.","Find the greater common divider","Calls <code>U::from(self)</code>.","Find the lowest common multiplier","Create a new <code>ValidationGuard</code> from a mut reference.","Contains <code>PositiveFloat</code>.","","to set a float if it is valid, or the default value if it …","Contains the definition of <code>Sign</code> and related notions.","","","","","return true if the data is valid for this struct","Contains <code>ZeroOneBoundedFloat</code>.","Error for the conversion form a <code>f64</code> to a <code>PositiveFloat</code>","","","","","","","","","","","The float is too big, i.e. <code>f64::INFINITY</code>","","","","","Maximum value","The float is <code>f64::NAN</code>","Value 1","","A float that is <code>&gt;= 0</code> and is not <code>f64::NAN</code> or <code>f64::INFINITY</code>.","","The float is &lt; 0","Value 0","","","","","","","","","","","","","","","","","","Returns the value of the subtraction of two numbers if it …","","","","","","","","","","","","","","","","","","","","Get the underling float. It could also be accessed by …","Returns a way to mutate the underlying float. If the final …","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Create a new Self from a <code>f64</code>. It returns <code>Some</code> only if the …","or return 0 or to <code>f64::MAX</code> if the value is infinity …","Create a new Self with the float as value if it is valid ( …","","","","","","","","","","","","","","Do the subtraction of two <code>PositiveFloat</code> saturating at 0. …","","","","","","","","","","","","","","","","","","","","","","","","","Strictly negative number (non zero)","Strictly positive number ( non zero)","Represent a sign.","Zero (or very close to zero)","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Return the levi civita symbol of the given index","","","","","","Get the sign form a f64.","Returns the sign of <code>a - b</code>, where <code>a</code> and <code>b</code> are usize","Get the sign of the given <code>i8</code>","return a f64 form the sign <code>(-1_f64, 0_f64, 1_f64)</code>.","Convert the sign to an i8.","","","","","","Error for the conversion form a <code>f64</code> to a …","The float is <code>f64::NAN</code>","Value 1","The float is too big, &gt; 1","The float is &lt; 0","Value 0","A float that f is  0 &lt;= f &lt;= 1 and is not NaN.","","","","","","","","Returns the value of the addition of two numbers if it …","Returns the value of the division of two numbers if it …","","Returns the value of the subtraction of two numbers if it …","","","","","","","","","","","","","Get the underling float. It could also be accessed by …","Returns a way to mutate the underlying float. If the final …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Create a new Self from a <code>f64</code>. It returns <code>Some</code> only if the …","or return 0 for value &lt; 0 and 1 for value &gt; 1. If the …","Create a new Self with the float as value if it is valid ( …","","","","","","","","","","","","Do the addition of two <code>ZeroOneBoundedFloat</code> saturating at 1.","Do the division of two <code>ZeroOneBoundedFloat</code> saturating at 1.","","Do the subtraction of two <code>ZeroOneBoundedFloat</code> saturating …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,1,1,1,1,6,8,1,6,8,1,1,1,6,8,1,6,8,1,6,8,1,6,8,1,6,1,6,6,8,1,6,8,1,6,8,1,6,8,1,1,1,1,1,1,1,1,1,6,8,8,8,8,8,8,1,1,1,1,1,1,1,6,1,1,6,8,1,1,1,1,1,6,8,1,1,1,8,1,1,1,1,1,1,1,1,1,8,1,8,8,6,6,1,6,1,6,8,1,8,1,1,6,6,8,1,1,6,6,8,1,6,8,1,6,8,1,1,1,1,1,1,1,1,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,0,49,0,49,51,0,49,49,49,49,51,0,0,53,53,53,53,53,53,53,53,53,53,60,53,53,53,53,53,60,53,53,0,53,60,53,53,53,53,53,53,53,53,53,53,53,53,60,53,60,53,53,53,53,53,60,53,60,53,53,53,53,60,53,53,53,53,53,53,53,53,53,60,53,53,53,53,53,53,60,60,53,53,53,60,53,60,53,60,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,60,53,60,53,53,53,53,53,53,60,53,60,53,53,53,53,60,53,60,53,60,53,53,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,69,54,69,69,54,0,54,54,54,54,69,54,69,54,54,54,54,54,69,54,69,54,54,54,54,69,54,54,69,54,54,54,54,54,54,69,69,54,54,69,54,69,54,69,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,69,54,69,54,54,54,54,54,54,69,54,69,54,54,54,54,54,69,54,69,54,69,54],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-2]],[1,[-1]]],[],[],[[2,[-1]]]],[[[1,[-2]],[1,[-1]]],3,[],[[4,[-1]]]],[[[1,[-1]]],[[5,[-1]]],[]],[[[1,[-1]]],[[5,[-1]]],[]],[6,7],[[[8,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[[1,[-1]]],[]],[6,7],[[[8,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[[1,[-1]]],[]],[[[1,[-1]]],[[3,[-1,-1]]],[]],[[[1,[-1]]],[[3,[-1,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[[[8,[-1]]],[[8,[-1]]],9],[[[1,[-1]]],[[1,[-1]]],9],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[6,6],10],[[[1,[-1]],[1,[-1]]],10,11],[6,[[1,[7]]]],[[],6],[[],[[8,[-1]]],12],[[],[[1,[-1]]],12],[-1,[[13,[6]]],14],[-1,[[13,[[8,[-2]]]]],14,15],[-1,[[13,[[1,[-2]]]]],14,15],[[6,6],16],[[[8,[-1]],[8,[-1]]],16,17],[[[1,[-1]],[1,[-1]]],16,17],[[6,18],19],[[[8,[-1]],18],19,20],[[[1,[-1]],18],19,21],[[[1,[-1]],18],19,22],[[[1,[-1]],18],19,23],[[[1,[-1]],18],19,24],[[[1,[-1]],18],19,25],[[[1,[-1]],18],19,26],[[[1,[-1]],18],19,27],[[[1,[-1]],18],19,20],[[[1,[-1]],18],19,28],[-1,-1,[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[[8,[-1]]],[]],[-1,-1,[]],[[[8,[-1]]],[[8,[-1]]],[]],[[[8,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[1,[-1]]],[[1,[[29,[-1]]]]],[]],[[[3,[-1,-1]]],[[1,[-1]]],[]],[[[30,[-1]]],[[1,[-1]]],12],[-1,-1,[]],[6,[[1,[7]]]],[[[31,[-1]]],[[1,[-1]]],[9,12]],[[[5,[-1]]],[[1,[-1]]],[]],[7,[[29,[6]]]],[[[1,[-1]],6],-1,[]],[[[1,[-1]],6],-1,[]],[[6,-1],3,32],[[[8,[-1]],-2],3,33,32],[[[1,[-1]],-2],3,33,32],[[[1,[-1]],6],[],[]],[[[1,[-1]],7],[],[]],[[[1,[-1]],7],[],[]],[[[1,[-1]],6],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[5,[-1]]],[]],[[[1,[-1]]],[[5,[-1]]],34],[-1,-2,[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[[3,[-1,-1]]],[]],[[[1,[-1]]],[[3,[-1,-1]]],34],[[[1,[-1]]],16,35],[[[1,[-1]]],[[0,[36,37,38,39]]],[]],[[[1,[-1]]],[[0,[36,37,38,39]]],[]],[[[1,[-1]]],[],40],[[[1,[-1]]],[[8,[-1]]],[]],[[-1,-1],[[1,[-1]]],[]],[[[8,[-1]]],29,[]],[[[8,[-1]]],29,[]],[6],[[6,6],[[29,[10]]]],[[[1,[-1]],[1,[-1]]],[[29,[10]]],41],[6,6],[[[1,[-1]],[1,[-1]]],[],41],[[6,-1],13,42],[[[8,[-1]],-2],13,43,42],[[[1,[-1]],-2],13,43,42],[[[8,[-1]]],[[3,[7,[29,[7]]]]],[]],[[[1,[-2]],[1,[-1]]],[],[],[[44,[-1]]]],[[[1,[-2]],[1,[-1]]],3,[],[[45,[-1]]]],[6,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[7,[[13,[6]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[[[1,[-1]]],-1,[]],0,[[[1,[-1]]],-1,[]],[[[1,[-1]]],-1,[]],0,[[[1,[-1]]],-1,[]],[[],[[1,[-1]]],35],0,[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],3,[],[]],[[48,48],10],[[],48],[-1,[[13,[48]]],14],[[48,48],16],[[48,18],19],[[48,18],19],[-1,-1,[]],[3,48],[[48,-1],3,32],[-1,-2,[],[]],[[48,48],[[29,[10]]]],[[48,-1],13,42],[-1,-2,[],[]],[-1,46,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],0,0,0,0,0,0,0,[[-1,-1],[],[41,44]],[[[49,[-1]]],50,[51,52]],[[[49,[-1]]],50,[51,52]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[],[51,52]],[[[49,[-1]]],[],[51,52]],[[[49,[-1]]],3,[51,52]],[[[49,[-1]],[49,[-1]]],16,[17,51,52]],[[[49,[-1]],18],19,[51,52]],[[[49,[-1]],18],19,[20,51,52]],[[[49,[-1]],18],19,[51,52]],[[[49,[-1]],18],19,[51,52]],[53,[[49,[53]]]],[54,[[49,[54]]]],[-1,-1,[]],[[-1,-1],-1,[44,11,35,55,9,56]],[-1,-2,[],[]],[[-1,-1],-1,[44,11,35,55,9,56,57,58]],[-1,[[49,[-1]]],[51,52,[59,[50]]]],0,[[[49,[-1]],-2],13,[51,52],42],[[-1,50],3,[]],0,[-1,46,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],[50,16],0,0,[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],0,[[],53],[[],53],[[],53],[[],53],0,0,0,[[],53],0,[[],53],0,0,[[53,53]],[[53,53]],[[53,53]],[[53,54]],[[53,53]],[[53,53],3],[[53,54],3],[[53,53],3],[53,-1,34],[53,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[53,53],[[29,[53]]]],[[53,53],[[29,[53]]]],[[53,53],[[29,[53]]]],[[53,53],[[13,[53,60]]]],[53,53],[60,60],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[53,53],10],[[],53],[53],[-1,[[13,[53]]],14],[-1,[[13,[60]]],14],[[53,53]],[[53,54]],[[53,53]],[[53,53]],[[53,53]],[[53,54],3],[[53,53],3],[[53,53],3],[[53,53],16],[[60,60],16],[53,50],[53,[[49,[53]]]],[[53,18],19],[[53,18],19],[[53,18],19],[[53,18],19],[[60,18],19],[[60,18],19],[-1,-1,[]],[54,53],[-1,[[29,[53]]],61],[-1,-1,[]],[[53,-1],3,32],[[60,-1],3,32],[-1,-2,[],[]],[-1,-2,[],[]],[53],[53,16],[53,16],[[],-1,[]],[[],53],[[],-1,[]],[[],53],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[53,54]],[[53,53,53]],[[53,53,53],3],[[53,53],3],[[53,53],3],[[53,54],3],[50,[[13,[53,60]]]],[50,53],[50,53],[[],53],[[53,53],[[29,[10]]]],[[53,53]],[[53,54]],[[53,50]],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[53,53],3],[[53,53],3],[[53,53],53],[[53,53],53],[[53,53],53],[[53,-1],13,42],[[60,-1],13,42],[[53,50],3],[60,[[29,[62]]]],[53],[53,[[29,[50]]]],[53,[[29,[63]]]],[53,[[29,[64]]]],[53],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[53,[[29,[65]]]],[53,[[29,[66]]]],[-1,[[13,[-2]]],[],[]],[50,[[13,[53]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[50,16],[[],53],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[67,67],[[-1,-2],3,[],[]],[[67,67],10],[[],67],[-1,[[13,[67]]],14],[[67,67],16],[[67,18],19],[[67,18],19],[68,67],[-1,-1,[]],[50,67],[[67,-1],3,32],[-1,-2,[],[]],[[[31,[7]]],67],[[67,67],67],[[67,67],3],[67],[[67,67],[[29,[10]]]],[[67,-1],13,42],[50,67],[[7,7],67],[68,67],[67,50],[67,68],[-1,-2,[],[]],[-1,46,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],0,0,0,0,0,0,0,[[54,53]],[54,-1,34],[54,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[54,54],[[13,[54,69]]]],[[54,54],[[13,[54,69]]]],[[54,54],[[29,[54]]]],[[54,54],[[13,[54,69]]]],[54,54],[69,69],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[54,54],10],[[],54],[54],[-1,[[13,[54]]],14],[-1,[[13,[69]]],14],[[54,53]],[[54,54],16],[[69,69],16],[54,50],[54,[[49,[54]]]],[[54,18],19],[[54,18],19],[[54,18],19],[[54,18],19],[[69,18],19],[[69,18],19],[-1,[[29,[54]]],61],[-1,-1,[]],[-1,-1,[]],[[54,-1],3,32],[[69,-1],3,32],[-1,-2,[],[]],[-1,-2,[],[]],[54],[54,16],[[],54],[[],-1,[]],[[],54],[[],-1,[]],[[54,54]],[[54,54]],[[54,54]],[[54,53]],[[54,54]],[[54,54],3],[[54,54],3],[50,[[13,[54,69]]]],[50,54],[50,54],[[],54],[[54,54],[[29,[10]]]],[[54,50]],[[54,54]],[[54,53]],[[54,54]],[[54,54]],[[54,54]],[[54,54]],[[54,54],3],[[54,54],3],[[54,54],54],[[54,54],54],[[54,54],54],[[54,54],54],[[54,-1],13,42],[[69,-1],13,42],[[54,50],3],[69,[[29,[62]]]],[54],[54,[[29,[50]]]],[54,[[29,[63]]]],[54,[[29,[64]]]],[54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[54,[[29,[65]]]],[54,[[29,[66]]]],[-1,[[13,[-2]]],[],[]],[50,[[13,[54]]]],[53,[[13,[54]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[50,16]],"c":[],"p":[[3,"Coordinate",13],[8,"Add",471],[15,"tuple"],[8,"AddAssign",471],[15,"array"],[4,"Axis2D",13],[15,"usize"],[3,"CoordinateIterator",13],[8,"Clone",472],[4,"Ordering",473],[8,"Ord",473],[8,"Default",474],[4,"Result",475],[8,"Deserializer",476],[8,"Deserialize",476],[15,"bool"],[8,"PartialEq",473],[3,"Formatter",477],[6,"Result",477],[8,"Debug",477],[8,"UpperHex",477],[8,"Octal",477],[8,"UpperExp",477],[8,"Display",477],[8,"LowerHex",477],[8,"LowerExp",477],[8,"Pointer",477],[8,"Binary",477],[4,"Option",478],[3,"Vec",479],[15,"slice"],[8,"Hasher",480],[8,"Hash",480],[8,"Copy",481],[8,"Zero",482],[8,"Iterator",483],[8,"DoubleEndedIterator",484],[8,"FusedIterator",485],[8,"ExactSizeIterator",486],[8,"Neg",471],[8,"PartialOrd",473],[8,"Serializer",487],[8,"Serialize",487],[8,"Sub",471],[8,"SubAssign",471],[3,"String",488],[3,"TypeId",489],[3,"NoneError",142],[3,"ValidationGuard",164],[15,"f64"],[8,"Validation",164],[8,"Sized",481],[3,"PositiveFloat",201],[3,"ZeroOneBoundedFloat",371],[8,"One",482],[8,"Unsigned",490],[8,"Mul",471],[8,"Div",471],[8,"AsRef",491],[4,"ConversionError",201],[8,"ToPrimitive",492],[8,"Error",493],[15,"i128"],[15,"i64"],[15,"u128"],[15,"u64"],[4,"Sign",336],[15,"i8"],[4,"ConversionError",371]],"b":[[57,"impl-UpperHex-for-Coordinate%3CT%3E"],[58,"impl-Octal-for-Coordinate%3CT%3E"],[59,"impl-UpperExp-for-Coordinate%3CT%3E"],[60,"impl-Display-for-Coordinate%3CT%3E"],[61,"impl-LowerHex-for-Coordinate%3CT%3E"],[62,"impl-LowerExp-for-Coordinate%3CT%3E"],[63,"impl-Pointer-for-Coordinate%3CT%3E"],[64,"impl-Debug-for-Coordinate%3CT%3E"],[65,"impl-Binary-for-Coordinate%3CT%3E"],[67,"impl-From%3C%26mut+Coordinate%3CT%3E%3E-for-CoordinateIterator%3C%26mut+T%3E"],[68,"impl-From%3CCoordinate%3CT%3E%3E-for-CoordinateIterator%3CT%3E"],[70,"impl-From%3C%26mut+CoordinateIterator%3CT%3E%3E-for-CoordinateIterator%3C%26mut+T%3E"],[71,"impl-From%3C%26CoordinateIterator%3CT%3E%3E-for-CoordinateIterator%3C%26T%3E"],[72,"impl-From%3C%26Coordinate%3CT%3E%3E-for-CoordinateIterator%3C%26T%3E"],[73,"impl-From%3CCoordinate%3CT%3E%3E-for-Coordinate%3COption%3CT%3E%3E"],[74,"impl-From%3C(T,+T)%3E-for-Coordinate%3CT%3E"],[75,"impl-From%3CVec%3CT%3E%3E-for-Coordinate%3CT%3E"],[77,"impl-From%3CAxis2D%3E-for-Coordinate%3Cusize%3E"],[78,"impl-From%3C%26%5BT%5D%3E-for-Coordinate%3CT%3E"],[79,"impl-From%3C%5BT;+2%5D%3E-for-Coordinate%3CT%3E"],[86,"impl-Index%3CAxis2D%3E-for-Coordinate%3CT%3E"],[87,"impl-Index%3Cusize%3E-for-Coordinate%3CT%3E"],[88,"impl-IndexMut%3Cusize%3E-for-Coordinate%3CT%3E"],[89,"impl-IndexMut%3CAxis2D%3E-for-Coordinate%3CT%3E"],[96,"impl-IntoIterator-for-Coordinate%3CT%3E"],[97,"impl-IntoIterator-for-%26Coordinate%3CT%3E"],[98,"impl-IntoIterator-for-%26mut+Coordinate%3CT%3E"],[151,"impl-Display-for-NoneError"],[152,"impl-Debug-for-NoneError"],[180,"impl-UpperExp-for-ValidationGuard%3C\'a,+T%3E"],[181,"impl-Debug-for-ValidationGuard%3C\'a,+T%3E"],[182,"impl-Display-for-ValidationGuard%3C\'a,+T%3E"],[183,"impl-LowerExp-for-ValidationGuard%3C\'a,+T%3E"],[184,"impl-From%3C%26mut+PositiveFloat%3E-for-ValidationGuard%3C\'a,+PositiveFloat%3E"],[185,"impl-From%3C%26mut+ZeroOneBoundedFloat%3E-for-ValidationGuard%3C\'a,+ZeroOneBoundedFloat%3E"],[225,"impl-Add-for-PositiveFloat"],[226,"impl-Add%3C%26PositiveFloat%3E-for-%26PositiveFloat"],[227,"impl-Add%3CPositiveFloat%3E-for-%26PositiveFloat"],[228,"impl-Add%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[229,"impl-Add%3C%26PositiveFloat%3E-for-PositiveFloat"],[230,"impl-AddAssign%3C%26PositiveFloat%3E-for-PositiveFloat"],[231,"impl-AddAssign%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[232,"impl-AddAssign-for-PositiveFloat"],[252,"impl-Div%3C%26PositiveFloat%3E-for-PositiveFloat"],[253,"impl-Div%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[254,"impl-Div-for-PositiveFloat"],[255,"impl-Div%3C%26PositiveFloat%3E-for-%26PositiveFloat"],[256,"impl-Div%3CPositiveFloat%3E-for-%26PositiveFloat"],[257,"impl-DivAssign%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[258,"impl-DivAssign%3C%26PositiveFloat%3E-for-PositiveFloat"],[259,"impl-DivAssign-for-PositiveFloat"],[264,"impl-LowerExp-for-PositiveFloat"],[265,"impl-Display-for-PositiveFloat"],[266,"impl-UpperExp-for-PositiveFloat"],[267,"impl-Debug-for-PositiveFloat"],[268,"impl-Display-for-ConversionError"],[269,"impl-Debug-for-ConversionError"],[271,"impl-From%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[272,"impl-NumCast-for-PositiveFloat"],[285,"impl-Mul%3C%26PositiveFloat%3E-for-PositiveFloat"],[286,"impl-Mul-for-PositiveFloat"],[287,"impl-Mul%3CPositiveFloat%3E-for-%26PositiveFloat"],[288,"impl-Mul%3C%26PositiveFloat%3E-for-%26PositiveFloat"],[289,"impl-Mul%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[292,"impl-MulAssign-for-PositiveFloat"],[293,"impl-MulAssign%3C%26PositiveFloat%3E-for-PositiveFloat"],[294,"impl-MulAssign%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[300,"impl-Pow%3CPositiveFloat%3E-for-PositiveFloat"],[301,"impl-Pow%3CZeroOneBoundedFloat%3E-for-PositiveFloat"],[302,"impl-Pow%3Cf64%3E-for-PositiveFloat"],[303,"impl-Rem-for-PositiveFloat"],[304,"impl-Rem%3CPositiveFloat%3E-for-%26PositiveFloat"],[305,"impl-Rem%3C%26PositiveFloat%3E-for-%26PositiveFloat"],[306,"impl-Rem%3C%26PositiveFloat%3E-for-PositiveFloat"],[307,"impl-RemAssign-for-PositiveFloat"],[308,"impl-RemAssign%3C%26PositiveFloat%3E-for-PositiveFloat"],[348,"impl-Display-for-Sign"],[349,"impl-Debug-for-Sign"],[350,"impl-From%3Ci8%3E-for-Sign"],[352,"impl-From%3Cf64%3E-for-Sign"],[403,"impl-LowerExp-for-ZeroOneBoundedFloat"],[404,"impl-Display-for-ZeroOneBoundedFloat"],[405,"impl-Debug-for-ZeroOneBoundedFloat"],[406,"impl-UpperExp-for-ZeroOneBoundedFloat"],[407,"impl-Display-for-ConversionError"],[408,"impl-Debug-for-ConversionError"],[422,"impl-Mul%3CZeroOneBoundedFloat%3E-for-%26ZeroOneBoundedFloat"],[423,"impl-Mul-for-ZeroOneBoundedFloat"],[424,"impl-Mul%3C%26ZeroOneBoundedFloat%3E-for-ZeroOneBoundedFloat"],[425,"impl-Mul%3CPositiveFloat%3E-for-ZeroOneBoundedFloat"],[426,"impl-Mul%3C%26ZeroOneBoundedFloat%3E-for-%26ZeroOneBoundedFloat"],[427,"impl-MulAssign-for-ZeroOneBoundedFloat"],[428,"impl-MulAssign%3C%26ZeroOneBoundedFloat%3E-for-ZeroOneBoundedFloat"],[434,"impl-Pow%3Cf64%3E-for-ZeroOneBoundedFloat"],[435,"impl-Pow%3CZeroOneBoundedFloat%3E-for-ZeroOneBoundedFloat"],[436,"impl-Pow%3CPositiveFloat%3E-for-ZeroOneBoundedFloat"],[437,"impl-Rem%3C%26ZeroOneBoundedFloat%3E-for-%26ZeroOneBoundedFloat"],[438,"impl-Rem-for-ZeroOneBoundedFloat"],[439,"impl-Rem%3C%26ZeroOneBoundedFloat%3E-for-ZeroOneBoundedFloat"],[440,"impl-Rem%3CZeroOneBoundedFloat%3E-for-%26ZeroOneBoundedFloat"],[441,"impl-RemAssign%3C%26ZeroOneBoundedFloat%3E-for-ZeroOneBoundedFloat"],[442,"impl-RemAssign-for-ZeroOneBoundedFloat"],[463,"impl-TryFrom%3Cf64%3E-for-ZeroOneBoundedFloat"],[464,"impl-TryFrom%3CPositiveFloat%3E-for-ZeroOneBoundedFloat"]]},\
"utils_lib_derive":{"doc":"Procedural macro: utils-lib-derive","t":"YYO","n":["Getter","Sealed","trait_sealed"],"q":[[0,"utils_lib_derive"]],"d":["Derive getter macro","Derive the <code>Sealed</code> trait","Creates a trait <code>Sealed</code> into a private module <code>private</code>."],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
